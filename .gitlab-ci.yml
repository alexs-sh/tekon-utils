stages:
  - check
  - build
   # -----------------------------------------------------------------------------
    # Check Build 
    # -----------------------------------------------------------------------------
check:
  image: debian:9
  stage: check
  script:
    - sed -i 's/deb.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - sed -i 's/security.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - apt update -y && apt install -y cmake clang clang-tidy git make cppcheck

    - mkdir reports

    - cmake -DCMAKE_C_COMPILER=/usr/lib/llvm-3.8/libexec/ccc-analyzer -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS_DEBUG="-Wall -Wextra -pedantic -std=c99 -D__linux__" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
    - cppcheck --enable=all --project=compile_commands.json 1>/dev/null 2>reports/cppcheck

    - find  -name '*.[ch]' | xargs clang-tidy  -checks=-clang-diagnostic-unused-parameter  1>reports/clang-tidy

    - scan-build -o reports make -j $(cat /proc/cpuinfo | grep processor | wc -l) > /dev/null

    - cat reports/cppcheck
    - cat reports/clang-tidy
  tags:
    - docker
  artifacts:
    paths:
    - reports
    expire_in: 1 day

x86_64-linux:
  image: debian:9
  stage: build
  script:
    - sed -i 's/deb.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - sed -i 's/security.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - apt update -y && apt install -y ninja-build cmake git gcc g++

    - mkdir build
    - cd build
    - cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS_RELEASE="-O3 -DNDEBUG -Wall -Wextra -pedantic -Werror -Wno-unused-parameter -std=c99" -DCMAKE_FIND_ROOT_PATH=/tmp/output ..
    - ninja
    - ninja test 
  tags:
    - docker

x86_64-linux-memsan:
  image: debian:9
  stage: build
  script:
    - sed -i 's/deb.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - sed -i 's/security.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - apt update -y && apt install -y ninja-build cmake git gcc g++

    - mkdir build
    - cd build
    - cmake -G "Ninja" -DCMAKE_C_FLAGS="-g -O0 -fsanitize=leak -fsanitize=address" ..
    - ninja
    - ninja test 
  tags:
    - docker

x86_64-linux-coverage:
  image: debian:9
  stage: build
  script:
    - sed -i 's/deb.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - sed -i 's/security.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - apt update -y && apt install -y ninja-build cmake git gcc g++ gcovr

    - mkdir build
    - cd build
    - cmake -G "Ninja" -DTEKON_TESTS_COVERAGE=1 -DCMAKE_FIND_ROOT_PATH=/tmp/output ..
    - ninja
    - ninja test
    - ../test/suite_msr.sh $(pwd)
    - ../test/suite_arch.sh $(pwd)
    - ../test/suite_sync.sh $(pwd)
    - gcov $(find -name '*gcno')
    - gcovr -r $(pwd)/.. --exclude-directories test --exclude-directories tekon/test --exclude-directories utils/test -s
  tags:
    - docker

armhf-linux:
  image: debian:9
  stage: build
  script:
    - sed -i 's/deb.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - sed -i 's/security.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - apt update -y && apt install -y ninja-build cmake git gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

    - mkdir build
    - cd build
    - cmake -G "Ninja" -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_FIND_ROOT_PATH=/usr/arm-linux-gnueabihf -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS_RELEASE="-O3 -DNDEBUG  -Wall -Wextra -Wno-unused-parameter -std=c99" -DCMAKE_FIND_ROOT_PATH=/tmp/output ..
    - ninja

  tags:
    - docker

x86_64-mingw:
  image: debian:9
  stage: build
  script:
    - sed -i 's/deb.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - sed -i 's/security.debian.org/mirror.yandex.ru/' /etc/apt/sources.list
    - apt update && apt install -y ninja-build cmake  git gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 build-essential autoconf automake  libtool

    - mkdir build 
    - cd build
    - cmake -G "Ninja" -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DCMAKE_LINKER=/usr/x86_64-w64-mingw32/bin/ld  -DCMAKE_C_STANDARD_LIBRARIES="-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32 -lws2_32 -liphlpapi -lpsapi -luserenv" -DCMAKE_EXE_LINKER_FLAGS="-Wl,-Bstatic -lwinpthread" .. 
    - ninja

  tags:
    - docker
